<script src="https://cdn.jsdelivr.net/npm/jspdf@2.4.0/dist/jspdf.umd.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<div class="row" id="productCards">
    {{#each tasks}}
        <div class="col-md-3 mb-4" data-id="{{_id}}" data-category="{{category}}">
            <div class="card">
                <div class="image-input-container">
                    <label for="imageInput{{_id}}"></label>
                    <div class="input-group">
                        <input type="text" id="imageInput{{_id}}" class="form-control image-input" placeholder="Ingrese la URL de la imagen">
                        <button class="btn btn-primary add-image-button" data-id="{{_id}}">Agregar</button>
                    </div>
                </div>
                <div class="image-preview">
                    <img id="imagePreview{{_id}}" src="{{imageUrl}}" alt="Imagen del producto" class="card-img-top">
                </div>
                <div class="card-body">
                    <h3>{{#if title}}{{title}}{{else}}Title Not Found{{/if}}</h3>
                    
                    <p>Cantidad: <span class="quantity" data-id="{{_id}}">{{quantity}}</span></p>
                    
                    <button class="btn btn-primary detail-button" data-bs-toggle="modal" data-bs-target="#detailModal{{_id}}">Detalle</button>
                    <button class="btn btn quantity-increment" data-id="{{_id}}">+</button>
                    <button class="btn btn quantity-decrement" data-id="{{_id}}">-</button>
                </div>
            </div>
        </div>

        <div class="modal fade" id="detailModal{{_id}}" tabindex="-1" aria-labelledby="detailModalLabel{{_id}}" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="detailModalLabel{{_id}}">Detalles del Producto</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p>Nombre: {{title}}</p>
                        <p>Descripción: {{description}}</p>
                        <p>Cantidad: {{quantity}}</p>
                        <p>Precio: ${{price}}</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                    </div>
                </div>
            </div>
        </div>
    {{/each}}
</div>

<div class="container mt-5">
    <h2>Lista de Productos</h2>

    <div class="mt-3">
        <h4>Filtrar por Categoría:</h4>
        <select id="categoryFilter" class="form-select">
            <option value="all">Mostrar Todas</option>
            <option value="category1">Categoría 1</option>
            <option value="category2">Categoría 2</option>
            {{#each uniqueCategories}}
                <option value="{{this}}">{{this}}</option>
            {{/each}}
        </select>
    </div>
    <table id="taskTable" class="table">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Descripción</th>
                <th>Categoría</th>
                <th>Cantidad</th>
                <th>Precio</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody id="tableBody">
            {{#each tasks}}
                <tr data-id="{{_id}}" data-category="{{category}}">
                    <td>{{#if title}}{{title}}{{else}}Nombre No Encontrado{{/if}}</td>
                    <td>{{#if description}}{{description}}{{else}}Descripción No Encontrada{{/if}}</td>
                    <td>{{category}}</td>
                    <td class="quantity" data-id="{{_id}}">{{quantity}}</td>
                    <td class="price" data-id="{{_id}}">${{price}}</td>
                    <td>
                        <a href="/tasks/edit/{{_id}}" class="btn btn-secondary">Editar</a>
                        <button class="btn btn-danger delete-button-table" data-id="{{_id}}">Eliminar</button>
                    </td>
                </tr>
            {{/each}}
        </tbody>
    </table>
</div>

<script>
   document.addEventListener('DOMContentLoaded', function () {
    const addImageButtons = document.querySelectorAll('.add-image-button');
    const imageInputs = document.querySelectorAll('.image-input');
    const imagePreviews = document.querySelectorAll('.image-preview img');

    addImageButtons.forEach(button => {
        const taskId = button.getAttribute('data-id');
        const storedImageUrl = localStorage.getItem(`image_${taskId}`);
        if (storedImageUrl) {
            const imagePreview = document.getElementById(`imagePreview${taskId}`);
            imagePreview.src = storedImageUrl;
        }
    });

    addImageButtons.forEach(button => {
        button.addEventListener('click', async function (event) {
            event.preventDefault();
            const taskId = button.getAttribute('data-id');
            const input = document.getElementById(`imageInput${taskId}`);
            const imageUrl = input.value.trim();

            const imagePreview = document.getElementById(`imagePreview${taskId}`);
            imagePreview.src = imageUrl;

            // Almacena la URL de la imagen en el localStorage
            localStorage.setItem(`image_${taskId}`, imageUrl);

            input.value = '';
        });
    });
    

        const deleteButtons = document.querySelectorAll('.delete-button');
        const deleteButtonsCard = document.querySelectorAll('.delete-button-card');
        const deleteButtonsTable = document.querySelectorAll('.delete-button-table');
        const categoryFilter = document.getElementById('categoryFilter');
        const tableRows = document.querySelectorAll('tbody tr');
        const searchForm = document.getElementById('searchForm');
        const searchQuery = document.getElementById('searchQuery');
        const productCards = document.getElementById('productCards');
        const tableBody = document.getElementById('tableBody');

        searchForm.addEventListener('submit', function (event) {
            event.preventDefault();
            const searchTerm = searchQuery.value.trim().toLowerCase();
            filterProductCards(searchTerm);
            filterTableRows(searchTerm);
        });

        function filterProductCards(searchTerm) {
            const cards = productCards.querySelectorAll('.col-md-3');
            cards.forEach(card => {
                const title = card.querySelector('h3').textContent.trim().toLowerCase();
                if (title.includes(searchTerm)) {
                    card.style.display = '';
                } else {
                    card.style.display = 'none';
                }
            });
        }

        function filterTableRows(searchTerm) {
            tableRows.forEach(row => {
                const title = row.querySelector('td:first-child').textContent.trim().toLowerCase();
                if (title.includes(searchTerm)) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        }

        deleteButtons.forEach(button => {
            button.addEventListener('click', async function (event) {
                event.preventDefault();
                const taskId = button.getAttribute('data-id');
                await handleDelete(taskId);
            });
        });

        deleteButtonsCard.forEach(button => {
            button.addEventListener('click', async function (event) {
                event.preventDefault();
                const taskId = button.getAttribute('data-id');
                await handleDelete(taskId);
            });
        });

        deleteButtonsTable.forEach(button => {
            button.addEventListener('click', async function (event) {
                event.preventDefault();
                const taskId = button.getAttribute('data-id');
                await handleDelete(taskId);
            });
        });

        const incrementButtons = document.querySelectorAll('.quantity-increment');
        const decrementButtons = document.querySelectorAll('.quantity-decrement');

        incrementButtons.forEach(button => {
            button.addEventListener('click', async function (event) {
                event.preventDefault();
                const taskId = button.getAttribute('data-id');
                await handleQuantityUpdate(taskId, 'increment');
            });
        });

        decrementButtons.forEach(button => {
            button.addEventListener('click', async function (event) {
                event.preventDefault();
                const taskId = button.getAttribute('data-id');
                await handleQuantityUpdate(taskId, 'decrement');
            });
        });

        categoryFilter.addEventListener('change', function () {
            const selectedCategory = categoryFilter.value;
            tableRows.forEach(row => {
                const category = row.getAttribute('data-category');
                if (selectedCategory === 'all' || selectedCategory === category) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });

            const cards = productCards.querySelectorAll('.col-md-3');
            cards.forEach(card => {
                const category = card.getAttribute('data-category');
                if (selectedCategory === 'all' || selectedCategory === category) {
                    card.style.display = '';
                } else {
                    card.style.display = 'none';
                }
            });
        });

        async function handleDelete(taskId) {
            const confirmDelete = confirm('¿Estás seguro de que quieres eliminar esta tarea?');
            if (confirmDelete) {
                const deleteUrl = `/tasks/delete/${taskId}`;
                try {
                    const response = await fetch(deleteUrl, {
                        method: 'DELETE',
                    });

                    if (response.ok) {
                        document.querySelector(`tr[data-id="${taskId}"]`).remove();
                        document.querySelector(`.col-md-3[data-id="${taskId}"]`).remove();
                    } else {
                        console.error('Error al eliminar la tarea. Status:', response.status);
                    }
                } catch (error) {
                    console.error('Error de red:', error);
                }
            }
        }

        async function handleQuantityUpdate(taskId, action) {
            const currentQuantity = parseInt(document.querySelector(`.quantity[data-id="${taskId}"]`).innerText);
            const updateUrl = `/tasks/updateQuantity/${taskId}?quantity=${action === 'increment' ? currentQuantity + 1 : currentQuantity - 1}`;

            try {
                const response = await fetch(updateUrl, {
                    method: 'PUT',
                });

                if (response.ok) {
                    const updatedTask = await response.json();
                    document.querySelector(`.quantity[data-id="${taskId}"]`).innerText = updatedTask.quantity;
                    document.querySelector(`tr[data-id="${taskId}"] .quantity`).innerText = updatedTask.quantity;
                } else {
                    console.error('Error al actualizar la cantidad. Status:', response.status);
                }
            } catch (error) {
                console.error('Error de red:', error);
            }
        }
    });
</script>

<style>
    .card {
        border: 2px solid #001172; /* Cambia el grosor del borde y el color */
        border-radius: 15px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease-in-out;
        height: 100%; /* Hace que todas las tarjetas tengan la misma altura */
    }

    .card:hover {
        transform: scale(1.05);
        border-color: #28a745; /* Cambia el color del borde al pasar el cursor sobre la tarjeta */
    }

    .card-body {
        padding: 20px;
    }

    .card h3 {
        font-size: 1.5rem;
        margin-bottom: 10px;
        color: #001172;
    }

    .card p {
        font-size: 1rem;
        color: #001172;
    }

    .card-footer {
        padding: 10px;
        background-color: #343a40;
        border-top: 1px solid #ddd;
        border-bottom-left-radius: 15px;
        border-bottom-right-radius: 15px;
    }

    .card-footer a,
    .card-footer button {
        margin-right: 10px;
        border-radius: 8px;
    }

    .card-footer a.btn-primary,
    .card-footer button.btn-primary {
        color: #fff;
        background-color: #007bff;
        border-color: #007bff;
    }

    .card-footer a.btn-primary:hover,
    .card-footer button.btn-primary:hover {
        background-color: #0056b3;
        border-color: #0056b3;
    }

    .card-footer a.btn-success,
    .card-footer button.btn-success {
        color: #fff;
        background-color: #28a745;
        border-color: #28a745;
    }

    .card-footer a.btn-success:hover,
    .card-footer button.btn-success:hover {
        background-color: #218838;
        border-color: #218838;
    }

    .card-footer a.btn-warning,
    .card-footer button.btn-warning {
        color: #fff;
        background-color: #ffc107;
        border-color: #070fff;
    }

    .card-footer a.btn-warning:hover,
    .card-footer button.btn-warning:hover {
        background-color: #d39e00;
        border-color: #d39e00;
    }

    #taskTable {
        color: #001172;
    }

    #taskTable th,
    #taskTable td {
        color: #001172;
    }

    .image-preview img {
        max-width: 350px;
        max-height: 250px;
    }

    .image-input-container {
        margin-bottom: 10px; /* Ajustar el espacio entre el campo de entrada y el botón */
    }

    .input-group {
        display: flex;
    }

    .image-input {
        flex-grow: 1; /* El campo de entrada ocupa todo el espacio disponible */
        border-top-right-radius: 0; /* Evitar esquinas redondeadas en el lado derecho del campo de entrada */
        border-bottom-right-radius: 0;
    }

    .add-image-button {
        border-top-left-radius: 0; /* Evitar esquinas redondeadas en el lado izquierdo del botón */
        border-bottom-left-radius: 0;
    }

    .quantity-increment:hover {
        background-color: #28a745; /* Color verde al pasar el cursor sobre el botón de incrementar */
        border-color: #28a745;
    }

    .quantity-decrement:hover {
        background-color: #dc3545; /* Color rojo al pasar el cursor sobre el botón de decrementar */
        border-color: #dc3545;
    }

    .delete-button:hover,
    .delete-button-card:hover,
    .delete-button-table:hover {
        background-color: #dc3545; /* Color rojo al pasar el cursor sobre el botón de eliminar */
        border-color: #dc3545;
    }

    .row .card {
        height: 100%; /* Hace que todas las tarjetas dentro de una fila tengan la misma altura */
    }
</style>

